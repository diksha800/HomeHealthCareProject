//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HomeHealthCareModelClass.Model
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class HomeHealthCareEntities : DbContext
    {
        public HomeHealthCareEntities()
            : base("name=HomeHealthCareEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Appointment> Appointments { get; set; }
        public virtual DbSet<Audit> Audits { get; set; }
        public virtual DbSet<doctorName> doctorNames { get; set; }
        public virtual DbSet<Doctor> Doctors { get; set; }
        public virtual DbSet<Specialist> Specialists { get; set; }
        public virtual DbSet<User> Users { get; set; }
    
        public virtual int Adduser(string firstName, string lastName, string email, string password, Nullable<System.DateTime> dOB, string typeOfUser, ObjectParameter errorMessage)
        {
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var dOBParameter = dOB.HasValue ?
                new ObjectParameter("DOB", dOB) :
                new ObjectParameter("DOB", typeof(System.DateTime));
    
            var typeOfUserParameter = typeOfUser != null ?
                new ObjectParameter("TypeOfUser", typeOfUser) :
                new ObjectParameter("TypeOfUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Adduser", firstNameParameter, lastNameParameter, emailParameter, passwordParameter, dOBParameter, typeOfUserParameter, errorMessage);
        }
    
        public virtual ObjectResult<AppointmentRecords_Result> AppointmentRecords()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AppointmentRecords_Result>("AppointmentRecords");
        }
    
        public virtual ObjectResult<DoctorNameList_Result> DoctorNameList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DoctorNameList_Result>("DoctorNameList");
        }
    
        public virtual int Getappointment(string doctorName, string specialist, Nullable<System.DateTime> appointmentDime)
        {
            var doctorNameParameter = doctorName != null ?
                new ObjectParameter("DoctorName", doctorName) :
                new ObjectParameter("DoctorName", typeof(string));
    
            var specialistParameter = specialist != null ?
                new ObjectParameter("Specialist", specialist) :
                new ObjectParameter("Specialist", typeof(string));
    
            var appointmentDimeParameter = appointmentDime.HasValue ?
                new ObjectParameter("AppointmentDime", appointmentDime) :
                new ObjectParameter("AppointmentDime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Getappointment", doctorNameParameter, specialistParameter, appointmentDimeParameter);
        }
    
        public virtual ObjectResult<Getaudit_Result> Getaudit()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Getaudit_Result>("Getaudit");
        }
    
        public virtual ObjectResult<SpecialistList_Result> SpecialistList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpecialistList_Result>("SpecialistList");
        }
    }
}
